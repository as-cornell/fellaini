{"version":3,"sources":["variables/_01-breakpoints.scss","variables/_02-variables.scss","../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","base/_base.scss","base/_main-layout.scss","mixins/_mixins.scss"],"names":[],"mappings":"AAAE;EAEA,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,gBAAgB;EAChB,aAAa;EACb,cAAc,EACb;;ACPH;EACE,eAAe;EACf,iBAAiB;EACjB,qBAAqB;EACrB,qBAAqB;EACrB,oBAAoB;EACpB,mBAAmB;EACnB,yBAAyB;EACzB,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;EAEf,gBAAgB;EAChB,sBAAsB;EACtB,sBAAsB;EAWtB,8CAA8C;EAC9C,2CAA2C;EAC3C,uBAAuB;EAGvB,uBAAuB;EAKvB,yBAAyB;EACzB,wBAAwB;EACxB,0BAA0B;EAC1B,uBAAuB;EACvB,wBAAwB;EAIxB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,aAAa;EAIb,oBAAoB;EACpB,kCAAmB;EACnB,qBAAqB;EAGrB,cAAc;EAOd,2BAAiB;EAWjB,8CAA0B;EAC1B,8BAAe;EAEf,yBAAyB;EAQzB,kDAA+B,EAChC;EC1BG;ID/DJ;MAoCI,uBAAuB,EAqD1B,EAAA;EC1BG;ID/DJ;MA6DI,gBAAgB,EA4BnB,EAAA;EC1BG;ID/DJ;MAoEI,2BAAiB,EAqBpB,EAAA;EC1BG;ID/DJ;MAwEI,qCAAkB,EAiBrB,EAAA;;AE1FD;;;;;8BAK8B;AAE9B;EACE,2BAAe;EACf,YAAY,EACb;;ACVD;;;;;;8BAM8B;AAE9B;EAEE,qBAAc;EACd,eAAe;EACf,cAAc;EACd,eAAe;EAEf,gBAAgB;EAChB,gBAAgB,EAIjB;EF4CG;IExDJ;MCFE,sDAA6B,EDc9B,EAAA;;AAKG;;EACA,oBAAoB,EACrB;;AAIH;EACE,kCAAkC;EAgBlC,uDAIY,EAeb;EAlCC;IACE,eAAe,EAChB;EACD;IACE,iBAAiB,EAClB;EAPH;IASI,mBAAmB,EACpB;EACD;IACE,mBAAmB,EACpB;EACD;IACE,iBAAiB,EAClB;EFiBC;IEjCJ;MAuBI,2QAGoG,EAUvG,EAAA;EFHG;IEjCJ;MA8BM,mQAGgG,EAEnG,EAAA;;AAiBH;;;;;;;;;;8BAU8B;AAE9B;EACE,eAAe;EACf,cAAc;EACd,sBAAwB;MAAxB,wBAAwB;EACxB,0BAA0B;MAA1B,0BAA0B,EAsC3B;EFzEG;IE+BJ;MAQM,eAAe;MACf,gDAAiC;MACjC,sDAEmB,EAWtB;MAVG;QACE,iBAAiB,EAClB;MACD;QACE,sBAAsB,EACvB;MACD;QACE,iBAAiB,EAClB,EAAA;EArBP;IA2BM,gBAAgB,EACjB;EA5BL;IA8BM,mBAAmB,EACpB;EA/BL;IAiCM,gBAAgB,EACjB;EFjED;IE+BJ;MAsCQ,kCAAc;MACd,2BAAiB,EAEpB,EAAA;;AAKL;EACE,sBAAsB;EACtB,eAAe,EAChB;;AACD;EACE,mBAAmB,EACpB","file":"style.css","sourcesContent":["  :root{\n  // widths\n  --xs: 320px;\n  --small: 480px;\n  --medium: 782px; // 782\n  --large: 1224px; // 1,224\n  --xl: 1432px; // 1,432\n  --xxl: 1640px; // 1640\n  }\n\n/// Mixin - xs Breakpoint\n/// Allows easier @include xs {} syntax\n@mixin xs {\n  @include breakpoint(var(--xs)) {\n    @content;\n  }\n}\n\n/// Mixin - small Breakpoint\n/// Allows easier @include small {} syntax\n@mixin small {\n  @include breakpoint(var(--small)) {\n    @content;\n  }\n}\n\n/// Mixin - medium Breakpoint\n/// Allows easier @include medium {} syntax\n@mixin medium {\n  @include breakpoint(var(--medium)) {\n    @content;\n  }\n}\n\n/// Mixin - large Breakpoint\n/// Allows easier @include large {} syntax\n@mixin large {\n  @include breakpoint(var(--large)) {\n    @content;\n  }\n}\n\n/// Mixin - xl Breakpoint\n/// Allows easier @include xl {} syntax\n@mixin xl {\n  @include breakpoint(var(--xl)) {\n    @content;\n  }\n}\n\n/// Mixin - \n@mixin xxl {\n  @include breakpoint(var(--xxl)){\n    @content;\n  }\n}\n\n/// Mixin - max-width Breakpoint\n/// Allows easier @include max-width {} syntax\n// @mixin max-width {\n//   @include breakpoint($max-width) {\n//     @content;\n//   }\n// }\n","\n:root {\n  --white: white;\n  --black: #2c2c2c;\n  --dark-text: #35363f;\n  --gray-dark: #707070;\n  --gray-med: #959595;\n  --gray-lt: #c2c0c0;\n  --gray-lightest: #fbfbfb;\n  --dusk: #435363;\n  --fog: #607774;\n  --storm: #4f869f;\n  --teal: #85c4ca;\n  --gold: #ffd91f;\n  --green: #4d9b5e;\n  --red: #b31b1b;\n\n  --gray: #c2c0c0; // depricate\n  --gray-light: #d9d9d9; // depricate\n  --near-white: #fbfbfb; // depricate\n\n  // page widths moved to _01-breakpoints.scss so they can be used here\n  // --xs: 320px;\n  // --small: 480px;\n  // --medium: 782px; // 782\n  // --large: 1224px; // 1,224\n  // --xl: 1432px; // 1,432\n  // --xxl: 1640px; // 1640\n\n  // Font families\n  --font-sans: \"canada-type-gibson\", sans-serif;\n  --font-serif: \"freight-micro-pro\", verdana;\n  --font-curly: \"Alisha\";\n\n  // font size\n  --base-font-size: 20px;\n  @include large {\n    --base-font-size: 24px;\n  }\n\n  --medium-font-size: 20px;\n  --small-font-size: 16px;\n  --sidebar-font-size: 20px;\n  --main-font-size: 28px;\n  --font-size--huge: 60px;\n\n  //font weights\n\n  --light: 300;\n  --regular: 400;\n  --semi: 600;\n  --heavy: 800;\n\n  // border-variables\n\n  --border-width: 1px;\n  --border-color: var(--gray-light);\n  --border-radius: 4px;\n\n  // spacing elements\n  --space: 1rem;\n  @include medium() {\n    --space: 1.5rem;\n  }\n\n  // gutter on first level wrappers; header, .container\n\n  --mainGutter: var(--space);\n  @include small() {\n    --mainGutter: var(--space); // 1 rem\n  }\n\n  @include medium() {\n    --mainGutter: calc(2 * var(--space)); // 2rem\n  }\n\n  // Base grid variables\n\n  --auto-grid-min-size: calc(10 * var(--space));\n  --grid-gap: var(--mainGutter);\n\n  --base-grid-column: 84px;\n\n  // @include medium(){\n  //     --base-grid-gap: calc(1.5 * var(--space));\n  // }\n\n  // universal spacing variables\n\n  --component-bottom-margin: calc(1 * var(--space));\n}","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","/* -------------------------\n\nTitle: _base.scss\nDescr: sets HTML and Body styles\n\n--------------------------- */\n\nbody{\n  background: var(--green);\n  color: pink;\n}","/* -------------------------\n\nTitle: <main> layouts.\nDescr: \n    main content is the <main> tag. It is where the main components are. It is a child of the .container.\n\n--------------------------- */\n\n.main {\n  // base page main conent grids\n  max-width: var(--xl);\n  margin: 0 auto;\n  display: grid;\n  grid-gap: 2rem;\n  // row gap 0 circle back\n  grid-row-gap: 0;\n  padding: 0 1rem;\n  @include medium {\n    @include base12GridColumns();\n  }\n}\n\n// Basic\n.basic,\n.landingPage {\n  > div {\n    grid-column: 1 / -1;\n  }\n}\n\n// Basic sidebar\n.basicSidebar {\n  grid-template-rows: auto auto 1fr;\n  .siteNav {\n    grid-area: nav;\n  }\n  .title {\n    grid-area: title;\n  }\n  .sidebar {\n    grid-area: sidebar;\n  }\n  .content {\n    grid-area: content;\n  }\n  aside {\n    grid-area: aside;\n  }\n  grid-template-areas:\n    \"nav\"\n    \"title\"\n    \"content\"\n    \"sidebar\";\n  @include medium {\n    grid-template-areas:\n      \"nav nav nav nav title title title title title title title title\"\n      \"nav nav nav nav content content content content content content content content\"\n      \"sidebar sidebar sidebar sidebar content content content content content content content content\";\n  }\n  &--has-aside {\n    @include medium {\n      grid-template-areas:\n        \"nav nav nav nav title title title title title title title title\"\n        \"nav nav nav nav content content content content content content aside aside\"\n        \"sidebar sidebar sidebar sidebar content content content content content content aside aside\";\n    }\n  }\n}\n\n// Article moved to _article.scss\n\n\n.page {\n  &--landing-page {\n    @include medium {\n    }\n    @include large {\n    }\n    @include xl {\n    }\n  }\n}\n\n/* -------------------------\n\nTitle: container layouts.\nDescr: \n    this is the container that spans from the <header> to <footer>. It establishes columns for sidebars etc. .mainContent(--modifier) is a child of .container.\n\n    - --has-aside and has--sidebar are the base models. Basic page, and TOC both use them\n\n    -- article and --hasPano are for articles, more complicated grids\n\n--------------------------- */\n\n.container{\n  grid-column: 2;\n  display: grid;\n  align-items: flex-start;\n  align-content: flex-start;\n\n  &--has-aside{\n    @include large{\n      grid-gap: 2rem;\n      grid-template-columns: 1fr minmax(200px, 300px);\n      grid-template-areas: \n      \"title title\"\n      \"components aside\";\n      .title{\n        grid-area: title;\n      }\n      .components{\n        grid-area: components;\n      }\n      aside{\n        grid-area: aside;\n      }\n    }\n  }\n\n  &--has-sidebar{\n    .toc-menu,.sidebar-nav{\n      grid-area: menu;\n    }\n    .sidebar{\n      grid-area: sidebar;\n    }\n    main{\n      grid-area: main;\n    }\n    @include medium{\n      }\n    @include xxl{\n        grid-gap: calc( 3 * var(--space));\n        grid-row-gap: var(--space);\n      }\n    }\n}\n\n\n// sections of a basic page\n.page-title {\n  grid-area: page-title;\n  display: block;\n}\n.main-content {\n  grid-area: content;\n}","// Mixin - Base Grid\n@mixin baseGrid($g-gap: var(--space), $g-row-gap: var(--space)){\n  display: grid;\n  grid-gap: $g-gap;\n}\n@mixin base12GridColumns(){\n  grid-template-columns: repeat(12,calc(8.59% - 2rem));\n}"]}